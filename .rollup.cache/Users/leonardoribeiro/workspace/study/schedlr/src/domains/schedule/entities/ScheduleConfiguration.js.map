{"version":3,"file":"ScheduleConfiguration.js","sourceRoot":"","sources":["ScheduleConfiguration.ts"],"names":[],"mappings":"AAAA;IACE,+BACU,WAAqB,EACrB,iBAAyB,EACzB,eAAuB,EACvB,eAAuB,EACvB,aAAqB;QAJrB,gBAAW,GAAX,WAAW,CAAU;QACrB,sBAAiB,GAAjB,iBAAiB,CAAQ;QACzB,oBAAe,GAAf,eAAe,CAAQ;QACvB,oBAAe,GAAf,eAAe,CAAQ;QACvB,kBAAa,GAAb,aAAa,CAAQ;QAE3B,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAA;QACrF,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAA;QACxE,IAAI,WAAW,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,EAAlB,CAAkB,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAA;QAE/E,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAA;QACpC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAA;QAElC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;IAClC,CAAC;IAED,8CAAc,GAAd;QACE,OAAO,IAAI,CAAC,WAAW,CAAA;IACzB,CAAC;IAED,oDAAoB,GAApB;QACE,OAAO,IAAI,CAAC,iBAAiB,CAAA;IAC/B,CAAC;IAED,kDAAkB,GAAlB;QACE,OAAO,IAAI,CAAC,eAAe,CAAA;IAC7B,CAAC;IAED,kDAAkB,GAAlB;QACE,OAAO,IAAI,CAAC,eAAe,CAAA;IAC7B,CAAC;IAED,gDAAgB,GAAhB;QACE,OAAO,IAAI,CAAC,aAAa,CAAA;IAC3B,CAAC;IAEO,4CAAY,GAApB,UAAqB,IAAY;QACzB,IAAA,KAAmB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAjC,KAAK,QAAA,EAAE,OAAO,QAAmB,CAAA;QACxC,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAA;QAChF,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;IACzF,CAAC;IACH,4BAAC;AAAD,CAAC,AA3CD,IA2CC","sourcesContent":["export class ScheduleConfiguration {\n  constructor(\n    private workingDays: number[],\n    private workingHoursStart: string,\n    private workingHoursEnd: string,\n    private breakHoursStart: string,\n    private breakHoursEnd: string,\n    ) {\n      if (workingDays.length === 0) throw new Error('At least one working day is required')\n      if (workingDays.length > 7) throw new Error('Maximum working days is 7')\n      if (workingDays.some(day => day < 0 || day > 6)) throw new Error('Invalid day')\n\n      this.validateHour(workingHoursStart)\n      this.validateHour(workingHoursEnd)\n\n      this.workingDays = workingDays\n  }\n\n  getWorkingDays() {\n    return this.workingDays\n  }\n\n  getWorkingHoursStart() {\n    return this.workingHoursStart\n  }\n\n  getWorkingHoursEnd() {\n    return this.workingHoursEnd\n  }\n\n  getBreakHoursStart() {\n    return this.breakHoursStart\n  }\n\n  getBreakHoursEnd() {\n    return this.breakHoursEnd\n  }\n\n  private validateHour(hour: string) {\n    const [hours, minutes] = hour.split(':')\n    if (parseInt(hours) < 0 || parseInt(hours) > 23) throw new Error('Invalid hour')\n    if (parseInt(minutes) < 0 || parseInt(minutes) > 59) throw new Error('Invalid minutes')\n  }\n}\n"]}